Вызов arr.sort() сортирует массив на месте, меняя в нём порядок элементов.
Он возвращает отсортированный массив, но обычно возвращаемое значение игнорируется, так как изменяется сам arr.
Например:

let arr = [ 1, 2, 15 ];
// метод сортирует содержимое arr
arr.sort();
alert( arr );  // 1, 15, 2

Порядок стал 1, 15, 2. Это неправильно! Но почему?
По умолчанию элементы сортируются как строки. Буквально, элементы преобразуются в строки при сравнении.
Для строк применяется лексикографический порядок, и действительно выходит, что "2" > "15".
Чтобы использовать наш собственный порядок сортировки, нам нужно предоставить функцию в качестве аргумента arr.sort().

Функция должна для пары значений возвращать:

function compare(a, b) {
  if (a > b) return 1; // если первое значение больше второго
  if (a == b) return 0; // если равны
  if (a < b) return -1; // если первое значение меньше второго
}

Например, для сортировки чисел:

function compareNumeric(a, b) {
  if (a > b) return 1;
  if (a == b) return 0;
  if (a < b) return -1;
}
let arr = [ 1, 2, 15 ];
arr.sort(compareNumeric);
alert(arr);  // 1, 2, 15

Теперь всё работает как надо.Давайте возьмём паузу и подумаем, что же происходит.
Упомянутый ранее массив arr может быть массивом чего угодно, верно?
Он может содержать числа, строки, объекты или что-то ещё. У нас есть набор каких-то элементов.
Чтобы отсортировать его, нам нужна функция, определяющая порядок, которая знает, как сравнивать его элементы.
По умолчанию элементы сортируются как строки.
Метод arr.sort(fn) реализует общий алгоритм сортировки. Нам не нужно заботиться о том, как он работает внутри
(в большинстве случаев это оптимизированная быстрая сортировка).
Она проходится по массиву, сравнивает его элементы с помощью предоставленной функции и переупорядочивает их.
Всё, что остаётся нам, это предоставить fn, которая делает это сравнение.

На самом деле от функции сравнения требуется любое положительное число, чтобы сказать «больше», и отрицательное число,
чтобы сказать «меньше».
Это позволяет писать более короткие функции:

let arr = [ 1, 2, 15 ];
arr.sort(function(a, b) { return a - b; });
alert(arr);  // 1, 2, 15

Помните стрелочные функции? Можно использовать их здесь для того, чтобы сортировка выглядела более аккуратной:
arr.sort( (a, b) => a - b );
Будет работать точно так же, как и более длинная версия выше.
--------------------------------------------
Правильное сравнение
«Правильный» алгоритм сравнения строк сложнее, чем может показаться, так как разные языки используют разные алфавиты.
Поэтому браузеру нужно знать, какой язык использовать для сравнения.
К счастью, все современные браузеры (для IE10− нужна дополнительная библиотека Intl.JS) поддерживают стандарт ECMA 402,
обеспечивающий правильное сравнение строк на разных языках с учётом их правил.
Для этого есть соответствующий метод.
Вызов str.localeCompare(str2) возвращает число, которое показывает, какая строка больше в соответствии с правилами
языка:
 - Отрицательное число, если str меньше str2.
 - Положительное число, если str больше str2.
 - 0, если строки равны.
Например:

alert( 'Österreich'.localeCompare('Zealand') ); // -1
У этого метода есть два дополнительных аргумента, которые указаны в документации. Первый позволяет указать язык
(по умолчанию берётся из окружения) — от него зависит порядок букв. Второй — определить дополнительные правила,
такие как чувствительность к регистру, а также следует ли учитывать различия между "a" и "á".

Метод localeCompare() Возвращает число, указывающее, должна данная строка находится до, после или в том же самом месте,
что и строка, переданная через параметр, при сортировке этих строк. Если данная строка предшествует строке
compareString, возвращает отрицательное число, если она следует за строкой compareString, возвращает положительное
значение и возвращает 0, если строки находятся на одном уровне.

При сравнении большого количества строк, например, при сортировке больших массивов, лучшим вариантом будет создание
объекта Intl.Collator и использование функции, предоставляемой его свойством compare.

--------------------------------
Методы toLowerCase() и toUpperCase() меняют регистр символов:
alert( 'Interface'.toUpperCase() ); // INTERFACE
alert( 'Interface'.toLowerCase() ); // interface

Если мы захотим перевести в нижний регистр какой-то конкретный символ:
alert( 'Interface'[0].toLowerCase() ); // 'i'



PS:почитать алгоритмы сортировок


